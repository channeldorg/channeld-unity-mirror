using UnityEngine;
using UnityEngine.AI;
using Mirror;
using Google.Protobuf;
using System;

namespace Channeld.Examples.Tanks
{
    public class TankChanneld : ChanneldNetworkBehaviour, IChannelDataProvider/*<TankGameChannelData>*/, ITransformStateProvider
    {
        [Header("Components")]
        public NavMeshAgent agent;
        public Animator animator;
        public TextMesh healthBar;
        public ITankController controller;

        [Header("Movement")]
        public float rotationSpeed = 100;

        [Header("Firing")]
        public GameObject projectilePrefab;
        public Transform projectileMount;

        [Header("Stats")]
        [SyncVar] public int health = 4;

        public bool isAI = false;

        // Represents the latest change (from SerializeSyncVars). Only changed properties will be set.
        private TankState syncState;
        private TransformState transformState;
        public Action<TransformState> OnTransformUpdated {get; set;}
        public bool IsRemoved { get; set; }

        public static Action<TankChanneld> OnLocalPlayerCreated;

        void Update()
        {
            // always update health bar.
            // (SyncVar hook would only update on clients, not on server)
            healthBar.text = new string('-', health);

            // movement for local player
            if (isClient && !isLocalPlayer)
                return;
            if (controller != null)
            {
                // rotate
                transform.Rotate(0, controller.GetRotation() * rotationSpeed * Time.deltaTime, 0);

                // move
                Vector3 forward = transform.TransformDirection(Vector3.forward);
                agent.velocity = forward * Mathf.Max(controller.GetMovement(), 0) * agent.speed;
                animator.SetBool("Moving", agent.velocity != Vector3.zero);

                // shoot
                if (controller.GetFired())
                {
                    if (isClient) CmdFire();
                    else if (isServer) CmdFire_Implementation();
                }
            }
        }

        // this is called on the server
        [Command]
        void CmdFire()
        {
            /* Will be replaced by Weaver with:

            PooledNetworkWriter writer = NetworkWriterPool.GetWriter();
            SendCommandInternal(typeof(Tank), "CmdFire", writer, 0);
            NetworkWriterPool.Recycle(writer);

            */
            CmdFire_Implementation();
        }

        void CmdFire_Implementation()
        {
            GameObject projectile = Instantiate(projectilePrefab, projectileMount.position, transform.rotation);
            NetworkServer.Spawn(projectile);
            RpcOnFire();
        }

        // this is called on the tank that fired for all observers
        [ClientRpc]
        void RpcOnFire()
        {
            /* Will be replaced by Weaver with:

            PooledNetworkWriter writer = NetworkWriterPool.GetWriter();
            SendRPCInternal(typeof(Tank), "RpcOnFire", writer, 0, includeOwner: true);
            NetworkWriterPool.Recycle(writer);
 
            */
           animator.SetTrigger("Shoot");
        }

        [ServerCallback]
        void OnTriggerEnter(Collider other)
        {
            if (!netIdentity.hasAuthority)
                return;

            if (other.GetComponent<Projectile>() != null)
            {
                --health;
                if (health == 0)
                    NetworkServer.Destroy(gameObject);
            }
        }

        /* Code generated by Weaver:
        
        public override bool SerializeSyncVars(NetworkWriter writer, bool forceAll)
        {
            bool result = base.SerializeSyncVars(writer, forceAll);
            if (forceAll)
            {
                writer.WriteInt(health);
                return true;
            }
            writer.WriteULong(base.syncVarDirtyBits);
            if ((base.syncVarDirtyBits & 1L) != 0L)
            {
                writer.WriteInt(health);
                result = true;
            }
            return result;
        }

        public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
        {
            base.DeserializeSyncVars(reader, initialState);
            if (initialState)
            {
                int num = health;
                Networkhealth = reader.ReadInt();
                return;
            }
            long num2 = (long)reader.ReadULong();
            if ((num2 & 1L) != 0L)
            {
                int num3 = health;
                Networkhealth = reader.ReadInt();
            }
        }

        */

        private void Awake()
        {
            if (controller == null)
                controller = GetComponent<ITankController>();

            syncState = new TankState()
            {
                Health = health,
                IsAI = isAI,
            };

            /* ChannelView refactoring
            TankChannelDataProvider.OnGenericDataChanged += (channelId, channelData) =>
            {
                TankState newState;
                if (channelData.TankStates.TryGetValue(netId, out newState))
                {
                    health = newState.Health;
                }
            };
            */
        }

        /* ChannelView refactoring
        private void Start()
        {
            if (isServer)
            {
                // Send the init state to channeld, even there's no change yet
                SerializeSyncVars(null, true);
            }
        }
        */

        protected override bool SerializeSyncVars(NetworkWriter writer, bool initialState)
        {
            if (!initialState && !IsDirty())
            {
                return false;
            }

            if (syncState == null)
                syncState = new TankState();

            if (initialState)
            {
                syncState.Health = health;
                syncState.IsAI = isAI;
            }
            else
            {
                if ((base.syncVarDirtyBits & 1L) != 0L)
                {
                    syncState.Health = health;
                }
                else
                {
                    return false;
                }
            }
            return false;
        }

        protected override void DeserializeSyncVars(NetworkReader reader, bool initialState)
        {
            // Do nothing as we don't need to read the SyncVars from the reader.
        }

        public System.Type GetChannelDataType()
        {
            return typeof(TankGameChannelData);
        }

        public bool UpdateChannelData(IMessage data)
        //public bool UpdateChannelData(TankGameChannelData tankChanneldata)
        {
            if (!hasAuthority)
                return false;

            var tankChanneldata = (TankGameChannelData)data;
            // Handle the situation that the game object is going to be removed (set from OnStopClient/Server).
            if (IsRemoved)
            {
                tankChanneldata.TankStates[netId] = new TankState(){Removed = true };
                tankChanneldata.TransformStates[netId] = new TransformState(){Removed = true };
                return true;
            }

            bool updated = false;
            if (syncState != null)
            {
                tankChanneldata.TankStates[netId] = syncState;
                syncState = null;
                updated = true;
            }
            if (transformState != null && (transformState.Position != null || 
                transformState.Rotation != null || transformState.Scale != null))
            {
                tankChanneldata.TransformStates[netId] = transformState;
                transformState = null;
                updated = true;
            }
            return updated;
        }

        public void OnChannelDataUpdated(in IMessage data)
        //public void OnChannelDataUpdated(in TankGameChannelData tankChanneldata)
        {
            var tankChanneldata = (TankGameChannelData)data;
            TankState newState;
            if (tankChanneldata.TankStates.TryGetValue(netId, out newState))
            {
                health = newState.Health;
            }

            TransformState transformState;
            if (tankChanneldata.TransformStates.TryGetValue(netId, out transformState))
            {
                OnTransformUpdated?.Invoke(transformState);
            }
        }

        public void UpdateTransform(TransformState state)
        {
            transformState = state;
        }

        public override void OnStartLocalPlayer()
        {
            OnLocalPlayerCreated?.Invoke(this);
        }
    }
}
