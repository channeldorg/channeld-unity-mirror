using UnityEngine;
using UnityEngine.AI;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;
using System;
using Mirror;
using Mirror.Examples.Tanks;

namespace Channeld.Examples.Tanks
{
    public class TankChanneld : NetworkBehaviour
    {
        [Header("Components")]
        public NavMeshAgent agent;
        public Animator animator;
        public TextMesh healthBar;

        [Header("Movement")]
        public float rotationSpeed = 100;

        [Header("Firing")]
        public KeyCode shootKey = KeyCode.Space;
        public GameObject projectilePrefab;
        public Transform projectileMount;

        [Header("Stats")]
        [SyncVar] public int health = 4;

        void Update()
        {
            // always update health bar.
            // (SyncVar hook would only update on clients, not on server)
            healthBar.text = new string('-', health);

            // movement for local player
            if (isLocalPlayer)
            {
                // rotate
                float horizontal = Input.GetAxis("Horizontal");
                transform.Rotate(0, horizontal * rotationSpeed * Time.deltaTime, 0);

                // move
                float vertical = Input.GetAxis("Vertical");
                Vector3 forward = transform.TransformDirection(Vector3.forward);
                agent.velocity = forward * Mathf.Max(vertical, 0) * agent.speed;
                animator.SetBool("Moving", agent.velocity != Vector3.zero);

                // shoot
                if (Input.GetKeyDown(shootKey))
                {
                    CmdFire();
                }
            }
        }

        // this is called on the server
        [Command]
        void CmdFire()
        {
            /* Will be replaced by Weaver with:

            PooledNetworkWriter writer = NetworkWriterPool.GetWriter();
            SendCommandInternal(typeof(Tank), "CmdFire", writer, 0);
            NetworkWriterPool.Recycle(writer);

            */
            GameObject projectile = Instantiate(projectilePrefab, projectileMount.position, transform.rotation);
            NetworkServer.Spawn(projectile);
            RpcOnFire();
        }

        // this is called on the tank that fired for all observers
        [ClientRpc]
        void RpcOnFire()
        {
            /* Will be replaced by Weaver with:

            PooledNetworkWriter writer = NetworkWriterPool.GetWriter();
            SendRPCInternal(typeof(Tank), "RpcOnFire", writer, 0, includeOwner: true);
            NetworkWriterPool.Recycle(writer);
 
            */
           animator.SetTrigger("Shoot");
        }

        [ServerCallback]
        void OnTriggerEnter(Collider other)
        {
            if (other.GetComponent<Projectile>() != null)
            {
                --health;
                if (health == 0)
                    NetworkServer.Destroy(gameObject);
            }
        }

        /* Code generated by Weaver:
        
        public override bool SerializeSyncVars(NetworkWriter writer, bool forceAll)
        {
            bool result = base.SerializeSyncVars(writer, forceAll);
            if (forceAll)
            {
                writer.WriteInt(health);
                return true;
            }
            writer.WriteULong(base.syncVarDirtyBits);
            if ((base.syncVarDirtyBits & 1L) != 0L)
            {
                writer.WriteInt(health);
                result = true;
            }
            return result;
        }

        public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
        {
            base.DeserializeSyncVars(reader, initialState);
            if (initialState)
            {
                int num = health;
                Networkhealth = reader.ReadInt();
                return;
            }
            long num2 = (long)reader.ReadULong();
            if ((num2 & 1L) != 0L)
            {
                int num3 = health;
                Networkhealth = reader.ReadInt();
            }
        }

        */

        private void Awake()
        {
            TankGameState.OnGenericDataChanged += (channelId, channelData) =>
            {
                TankState newState;
                if (channelData.TankStates.TryGetValue(netId, out newState))
                {
                    //if (!SyncVarEqual(newState.Health, ref health))
                    //    SetSyncVar(newState.Health, ref health, 1uL);
                    health = newState.Health;
                }
            };
        }

        protected override bool SerializeSyncVars(NetworkWriter writer, bool initialState)
        {
            var updateData = new TankGameChannelData();
            updateData.TankStates[netId] = new TankState() { Health = health };
            TankGameState.SendUpdate(netIdentity, updateData);
            return false;
        }

        protected override void DeserializeSyncVars(NetworkReader reader, bool initialState)
        {
            // Do nothing as we don't need to read the SyncVars from the reader.
        }

        private void OnDestroy()
        {
            var updateData = new TankGameChannelData();
            updateData.TankStates[netId] = new TankState() { Removed = true };
            TankGameState.SendUpdate(netIdentity, updateData);
        }
    }
}
