using System; using System.Collections.Generic; using System.Linq; using Mirror;  namespace Channeld.Spatial {     /// <summary>
    /// Used by spatial channel servers 
    /// </summary>     public class ChanneldSpatialInterestManagement : InterestManagement     {         /* aoi.OnSpawned/OnDestroy is only called in NetworkServer         public override void OnSpawned(NetworkIdentity identity)         {         }          public override void OnDestroyed(NetworkIdentity identity)         {         }         */          // Returns true if the spawn message of the network object should be sent to the newObserver(client that is just ready)          public override bool OnCheckObserver(NetworkIdentity identity, NetworkConnection newObserver)         {             if (newObserver is NetworkConnectionToServer)                 return false;              // TODO: Check if the network object is in the client's interest area (3x3 spatial channels)             return true;         }          // Update the observer(client) set that will receive messages upon the network object's spawn or state change.         public override void OnRebuildObservers(NetworkIdentity identity, HashSet<NetworkConnection> newObservers, bool initialize)         {             /* Single server logic             foreach (NetworkConnectionToClient conn in NetworkServer.connections.Values)             {                 // authenticated and joined world with a player?                 if (conn != null && conn.isAuthenticated && conn.identity != null)                 {                     newObservers.Add(conn);                 }             }             */              // Network object has client owner - send spawn message to the owner and broadcast to adjacent channel             // Only need to send to one client connection. The broadacst is handled in @SpatialNetworkConnectionToClient.SendSpawnInChannel()             if (identity.connectionToClient != null)                 newObservers.Add(identity.connectionToClient);             // Network object is server-owned - send spawn message to the first client and broadcast to adjacent channel             else if (NetworkServer.connections.Count > 0)                 newObservers.Add(NetworkServer.connections.First().Value);         }     } } 